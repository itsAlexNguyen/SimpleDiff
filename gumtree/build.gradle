
plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

allprojects {
    apply plugin: 'idea'

    group = 'com.github.gumtreediff'
    version = '2.1.3-SNAPSHOT'

    repositories {
        mavenCentral()
        jcenter()
    }
}

ext.isRelease = !project.version.endsWith("SNAPSHOT")

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '8.18'
        configFile = rootProject.file('gumtree_checkstyle.xml')
        configProperties = [suppressionFile: "${rootProject.file('checkstyle_ignore.xml')}"]
        ignoreFailures = false
        showViolations = true
    }

    dependencies {
        annotationProcessor 'org.atteo.classindex:classindex:3.4'
        implementation 'org.atteo.classindex:classindex:3.4'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
        testImplementation 'org.hamcrest:hamcrest-library:2.1'

    }

    test {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
            events "passed", "skipped", "failed"
        }
    }
}

configure(subprojects.findAll { it.name != 'core' }) {
    dependencies {
        implementation project(':core')
    }
}


def jacocoProjectsNames = ['core', 'gen.jdt']
def jacocoProjects = subprojects.findAll { it.name in jacocoProjectsNames }
configure(jacocoProjects) {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = '0.8.3'
    }

    jacocoTestReport {
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoProjects.test)

    getAdditionalSourceDirs().from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    getSourceDirectories().from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from = files(jacocoProjects.sourceSets.main.output)
    getExecutionData().from = files(jacocoProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = jacocoProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}

evaluationDependsOnChildren()

configure(subprojects) {
    if (project.hasProperty('skipNative') && it.hasProperty('isNative') && it.isNative == true)
        it.test.enabled = false
}